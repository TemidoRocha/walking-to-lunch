webpackJsonp([32],{2605:function(a,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),e(2606)},2606:function(a,t,e){"use strict";var n=this&&this.__extends||function(){var a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(a,t){a.__proto__=t}||function(a,t){for(var e in t)t.hasOwnProperty(e)&&(a[e]=t[e])})(t,e)};return function(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0});var l=e(2607),r=function(a){function t(t,e){var n=a.call(this,e)||this;return n.logger=t.newLogger("CallingBotService"),n.initializeOnAppLaunchAndReinit(),n}return n(t,a),t.$inject=["loggingService","orchestrationService"],t.prototype.initializeOnAppLaunchAndReinit=function(a){this.logger.info("initializing calling bot service"),this.botInstances=new Map},t.prototype.mtmaTelemetryIdentifier=function(){return"CallingBotService"},t.prototype.cleanupOnAppTeardown=function(a){this.botInstances=void 0},t.prototype.getCachedBotInstance=function(a,t){this.logger.info("get cached bot instance for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t);var e=this.getCachedBotData(a,t);return e&&e.callingBot},t.prototype.getBotInstance=function(a,t,e,n,l,r,o,i,s){this.logger.info("get bot instance for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t+", mode "+e+", owner "+teamspace.services.DataChannelOwnerId[n]);var c=this.getCachedBotData(a,t);return c||(this.logger.info("initializing new bot for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t),c={callingBot:new teamspace.services.CallingBot(a,t,e,l,r,o,i,s)},this.botInstances.get(a.teamsCallId).bots.set(t,c)),c.callingBot},t.prototype.registerDataCallback=function(a,t,e,n,r){this.logger.info("register data channel callback for call "+a.callId+", teamsCallId "+a.teamsCallId+". botMri "+t+", channel "+e+", owner "+teamspace.services.DataChannelOwnerId[n]);var o=this.botInstances.get(a.teamsCallId);if(!o)return this.logger.error("bot instance does not exist for call "+a.callId+", teamsCallId "+a.teamsCallId),!1;var i=o.bots.get(t);return i?(i.dataChannelHandler||(this.logger.info("creating new data channel handler for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t+", channel "+e+", owner "+teamspace.services.DataChannelOwnerId[n]),i.dataChannelHandler=new l.CallingBotDataChannelHandler(a,e,this.logger)),i.dataChannelHandler.addHandler(n,r),!0):(this.logger.error("cannot find bot for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t),!1)},t.prototype.unregisterDataCallback=function(a,t,e){this.logger.info("unregister data channel callback for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t+", owner "+teamspace.services.DataChannelOwnerId[e]);var n=this.botInstances.get(a.teamsCallId);if(n){var l=n.bots.get(t);l?l.dataChannelHandler?0===l.dataChannelHandler.removeHandler(e)&&(this.logger.info("no more data channel registrations, call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t),l.dataChannelHandler.dispose(),l.dataChannelHandler=void 0):this.logger.warn("data channel handler does not exist for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t):this.logger.warn("cannot find bot for call "+a.callId+", teamsCallId "+a.teamsCallId+", botMri "+t)}else this.logger.warn("bot instance does not exist for call "+a.callId+", teamsCallId "+a.teamsCallId)},t.prototype.getCachedBotData=function(a,t){var e=this,n=this.botInstances.get(a.teamsCallId);return n||(this.logger.info("creating new bot instance for call "+a.callId+", teamsCallId "+a.teamsCallId),n={bots:new Map,callStateSubscription:a.on("callStateChanged",function(){return e.onCallStateChanged(a)})},this.botInstances.set(a.teamsCallId,n)),n.bots.get(t)},t.prototype.onCallStateChanged=function(a){if(7===a.state){this.logger.info("call "+a.callId+", teamsCallId "+a.teamsCallId+" is disconnected, cleaning up bot instances and data channel registrations");var t=this.botInstances.get(a.teamsCallId);if(!t)return;t.bots.forEach(function(a,t){a.dataChannelHandler&&(a.dataChannelHandler.dispose(),a.dataChannelHandler=void 0),a.callingBot.dispose()}),t.bots.clear(),t.callStateSubscription.dispose(),t.callStateSubscription=void 0,t.callIdSubscription.dispose(),t.callIdSubscription=void 0,this.botInstances.delete(a.teamsCallId)}},t}(teamspace.services.MTMABase);t.CallingBotService=r,angular.module("teamspace.callingBotService",["teamspace.loggingService","teamspace.constants","teamspace.orchestrationService"]).service("callingBotService",r)},2607:function(a,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function a(a,t,e){this.call=a,this.channelId=t,this.logger=e,e.info("["+a.callId+"]["+t+"] initializing data channel handler"),this.callingBotDataChannelRegistrations=[],a.dataChannelAdapter.addHandler(t,this).catch(function(n){return e.error("["+a.callId+"] data channel addHandler is failed for channel "+t+" with error "+n)})}return a.prototype.addHandler=function(a,t){-1===this.callingBotDataChannelRegistrations.findIndex(function(t){return t.ownerId===a})&&this.callingBotDataChannelRegistrations.push({ownerId:a,handler:t})},a.prototype.removeHandler=function(a){return this.callingBotDataChannelRegistrations=this.callingBotDataChannelRegistrations.filter(function(t){return t.ownerId!==a}),this.callingBotDataChannelRegistrations.length},a.prototype.dispose=function(){var a=this;this.logger.info("["+this.call.callId+"]["+this.channelId+"] cleaning up data channel handler"),this.call.dataChannelAdapter&&this.call.dataChannelAdapter.removeHandler(this.channelId).catch(function(t){return a.logger.error("["+a.call.callId+"]["+a.channelId+"] data channel removeHandler is failed with error "+t)}),this.callingBotDataChannelRegistrations=null},a.prototype.onStarted=function(a,t){return Promise.resolve()},a.prototype.onStopped=function(a){return Promise.resolve()},a.prototype.onDataReceived=function(a,t,e){var n;try{n=JSON.parse(t.toString())}catch(a){try{var l=(new TextDecoder).decode(t);n=JSON.parse(l)}catch(a){return this.logger.error("["+this.call.callId+"]["+this.channelId+"] failed to parse data channel response, error "+a),Promise.reject(a)}}if(n.events)for(var r=0,o=n.events;r<o.length;r++){var i=o[r];this.sendData(teamspace.services.CallingBotDataType.Event,i)}if(n.recognitionResults)for(var s=0,c=n.recognitionResults;s<c.length;s++){var d=c[s];this.sendData(teamspace.services.CallingBotDataType.Caption,d)}if(n.coachResults)for(var h=0,g=n.coachResults;h<g.length;h++){var p=g[h];this.sendData(teamspace.services.CallingBotDataType.Coach,p)}return Promise.resolve()},a.prototype.sendData=function(a,t){for(var e=0,n=this.callingBotDataChannelRegistrations;e<n.length;e++){var l=n[e];this.logger.debug("["+this.call.callId+"]["+this.channelId+"] data channel callback for "+teamspace.services.DataChannelOwnerId[l.ownerId]),l.handler(a,t)}},a}();t.CallingBotDataChannelHandler=n}},[2605]);